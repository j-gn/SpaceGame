// Generated by CoffeeScript 1.4.0
(function() {
  var Observer, diffLib;

  diffLib = require("../lib/jsonDiff.js");

  Observer = (function() {

    Observer.prototype.removeObject = function(compareFunc) {
      var indexToRemove, self;
      self = this;
      indexToRemove = "-1";
      Object.keys(self.existing).forEach(function(p) {
        if (compareFunc(self.existing[p].obj) === true) {
          return indexToRemove = p;
        }
      });
      if (indexToRemove !== "-1") {
        self.removed.push(self.existing[parseInt(indexToRemove)]);
        self.existing.splice(parseInt(indexToRemove), 1);
        return;
      }
      indexToRemove = "-1";
      Object.keys(self.added).forEach(function(p) {
        if (compareFunc(self.added[p].obj) === true) {
          return indexToRemove = p;
        }
      });
      if (indexToRemove !== "-1") {
        self.removed.push(self.added[parseInt(indexToRemove)]);
        return self.added.splice(parseInt(indexToRemove), 1);
      }
    };

    Observer.prototype.addObject = function(obj) {
      return this.added.push({
        obj: obj
      });
    };

    Observer.prototype.getState = function() {
      var deltaState, self;
      self = this;
      deltaState = {};
      this.existing.forEach(function(p) {
        var d;
        d = self.diffTool.getDelta(p.lastState, p.obj);
        if (d !== void 0) {
          if (deltaState.existing === void 0) {
            deltaState.existing = [];
          }
          deltaState.existing.push(d);
          return p.lastState = JSON.parse(JSON.stringify(p.obj));
        }
      });
      this.added.forEach(function(p) {
        var d;
        d = self.diffTool.getDelta(p.lastState, p.obj);
        if (d !== void 0) {
          if (deltaState.added === void 0) {
            deltaState.added = [];
          }
          deltaState.added.push(d);
          p.lastState = JSON.parse(JSON.stringify(p.obj));
        }
        return self.existing.push(p);
      });
      this.added = [];
      this.removed.forEach(function(p) {
        if (deltaState.removed === void 0) {
          deltaState.removed = [];
        }
        return deltaState.removed.push(JSON.parse(JSON.stringify(p.obj)));
      });
      this.removed = [];
      if (Object.keys(deltaState).length === 0) {
        return null;
      } else {
        return deltaState;
      }
    };

    function Observer() {
      this.diffTool = new diffLib.JsonDiff();
      this.added = [];
      this.existing = [];
      this.removed = [];
      console.log("new observer!");
    }

    return Observer;

  })();

  exports.Observer = Observer;

}).call(this);
